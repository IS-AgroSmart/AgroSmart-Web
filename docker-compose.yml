version: '3'
services:
    nginx:
        image: nginx
        network_mode: host
        volumes: 
            - ${PREFIX}/nginx:/etc/nginx
            - ${PREFIX}/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ${PREFIX}/app/staticfiles:/static
        depends_on: 
            - postgres
            - nodeodm
    geoserver:
        image: mxabierto/boundless-suite:efeabbd1a9afe9080acb5176c66ac4ec06408bb0
        network_mode: host
        volumes: 
            - ${PREFIX}/flights:/media/input
            - ${PREFIX}/projects:/media/USB
            - ${PREFIX}/geoserver_data:/var/opt/boundless/server/geoserver/data
        environment:
            - GEOSERVER_DATA_DIR=/var/opt/boundless/server/geoserver/data
            - JAVA_OPTS=-Xms256m -Xmx320m -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:-UsePerfData -Dorg.geotools.referencing.forceXY=true -Dorg.geotoools.render.lite.scale.unitCompensation=true -Xbootclasspath/a:/usr/local/tomcat/lib/marlin-0.7.3-Unsafe.jar -Dsun.java2d.renderer=org.marlin.pisces.PiscesRenderingEngine -Dsun.java2d.renderer.useThreadLocal=false -Djava.library.path=/usr/lib:/usr/lib/jni:/opt/libjpeg-turbo/lib64:/usr/lib64 -Xbootclasspath/a:/opt/tomcat/lib/marlin-0.7.3-Unsafe.jar -Dsun.java2d.renderer=org.marlin.pisces.PiscesRenderingEngine -Dsun.java2d.renderer.useThreadLocal=false -server -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=true
    nodeodm:
        image: opendronemap/nodeodm
        network_mode: host
        volumes:
            - ${PREFIX}/flights:/var/www/data
        entrypoint: 
            - "/usr/bin/nodejs"
            - "/var/www/index.js"
            - "--log_level"
            - "silly"
            - "--webhook"
            - "http://container-nginx/api/webhook-processing-complete"
    postgres:
        image: postgres
        network_mode: host
        volumes:
            - ${PREFIX}/postgres:/var/lib/postgresql/data
        environment:
            POSTGRES_PASSWORD: example
    vue:
        build: 
            context: ${PREFIX}/app/frontend
            dockerfile: Dockerfile
        network_mode: host
        volumes:
            - ${PREFIX}/app/frontend:/app
    django:
        build:
            context: ${PREFIX}/app
            dockerfile: Dockerfile
        network_mode: host
        volumes:
            - ${PREFIX}/app:/app
            - ${PREFIX}/flights:/flights
#    duckdns:
#        image: linuxserver/duckdns
#        network_mode: host
#        container_name: duckdns
#        environment:
#          - TZ=America/Guayaquil
#          - SUBDOMAINS=droneapp
#          - TOKEN=${DUCKDNSTOKEN}
#        restart: unless-stopped
#    letsencrypt:
#        image: linuxserver/letsencrypt
#        container_name: letsencrypt
#        network_mode: host
#        cap_add:
#          - NET_ADMIN
#        environment:
#          - PUID=1000
#          - PGID=1000
#          - TZ=America/Guayaquil
#          - URL=droneapp.duckdns.org
#          - VALIDATION=duckdns
#          - DUCKDNSTOKEN=${DUCKDNSTOKEN}
#          - EMAIL=${LETSENCRYPT_EMAIL}
#          - DHLEVEL=2048 #optional
#          - ONLY_SUBDOMAINS=false #optional
#        volumes:
#          - ${PREFIX}/letsencrypt:/config
#        ports:
#          - 443:443
#          - 80:80 #optional
#        restart: unless-stopped
