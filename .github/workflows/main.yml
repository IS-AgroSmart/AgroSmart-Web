name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

env:
    SECRET_KEY: "dummysecretkey"
    GEOSERVER_PASSWORD: "geoserver"
    DEBUG: "True"
    DB_USER: "djangouser"
    DB_NAME: "db"
    DB_PASSWORD: "dbpass"
    DB_HOST: "dummyhost"
    EMAIL_HOST: "smtp.dummy.com"
    EMAIL_HOST_USER: "mydummyuser@notfound.com"
    EMAIL_HOST_PASSWORD: "mydummyemailpassword"
    FCM_API_KEY: "dummyfcm"
    APNS_CERTIFICATE: "/dummypath/dummycert"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8.x
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install mysql_config
        run: sudo apt-get update && sudo apt-get install -y libmysqlclient-dev libpq-dev
      - name: Cache Pip modules
        uses: actions/cache@v2
        env:
          cache-name: cache-python-modules
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Cache Node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend
      - name: Run backend tests
        run: pytest --cov . -n 4 --junitxml=xunit-reports/xunit-result-main.xml
      - name: Generate backend coverage report
        run: | 
          coverage xml
          coverage html
      - name: Run frontend tests and generage coverage report
        run: npm run test:unit --coverage
        working-directory: ./frontend
      # Ugly workaround, caused b/c Sonar runs on Docker: https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/6
      - name: Fix frontend code coverage paths
        working-directory: ./frontend
        run: |
          sed -i 's/\/home\/runner\/work\/AgroSmart-Web\/AgroSmart-Web\//\/github\/workspace\//g' coverage/lcov.info
          sed -i 's/\/home\/runner\/work\/AgroSmart-Web\/AgroSmart-Web\//\/github\/workspace\//g' test-report.xml
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Publish frontend coverage report
        uses: actions/upload-artifact@v2
        with:
          name: frontend-cov-report
          path: ./frontend/coverage/lcov-report/
      - name: Publish backend coverage report
        uses: actions/upload-artifact@v2
        with:
          name: backend-cov-report
          path: ./htmlcov/
